AWSTemplateFormatVersion: "2010-09-09"
Description: "SecretManager and RDSProxy create"

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "proxyName"
        Parameters:
          - proxyName
      - Label:
          default: "RDS Configuration"
        Parameters:
          - DBInstanceName
          - DBMasterUserName
          - DBPassword
          - DBHost
          - DBPort
    ParameterLabels:
      DBInstanceName:
        default: "DBInstanceName"
      DBMasterUserName:
        default: "DBUserName"
      DBPassword:
        default: "DBPassword"
      DBHost:
        default: "DBHost"
      DBPort:
        default: "DBPort"
# ------------------------------------------------------------#
# Input Parameters
# ------------------------------------------------------------# 
Parameters:
  proxyName:
    Type: String
    Default: "budonoki-proxy"
  DBInstanceName:
    Type: String
    Default: "budonoki-rds"
  DBMasterUserName:
    Type: String
    Default: "dbuser"
  DBPassword:
    Type: String
    NoEcho: true
    Default: "dbpassword"
  DBHost:
    Type: String
    Default: "budonoki-rds.c4otf2hm9tqe.ap-northeast-1.rds.amazonaws.com"
  DBPort:
    Type: Number
    Default: 3306
  vpcId:
    Type: 'AWS::EC2::VPC::Id'
  subnetIda:
    Type: 'AWS::EC2::Subnet::Id'
    Description : "select public-subnet-a"
  subnetIdc:
    Type: 'AWS::EC2::Subnet::Id'
    Description : "select public-subnet-c"
  securityGroupId:
    Type: 'AWS::EC2::SecurityGroup::Id'
    Description : "select proxy-sg"
# ------------------------------------------------------------#
# Resources
# ------------------------------------------------------------# 
Resources:
  RDSDBProxy:
      Type: "AWS::RDS::DBProxy"
      Properties:
          DBProxyName: !Sub "${proxyName}"
          EngineFamily: "MYSQL"
          VpcSecurityGroupIds: 
            - !Sub "${securityGroupId}"
          VpcSubnetIds: 
            - !Sub "${subnetIda}"
            - !Sub "${subnetIdc}"
          Auth: 
            - 
              AuthScheme: "SECRETS"
              SecretArn: !ImportValue SecretsManagerSecret-ARN
              IAMAuth: "DISABLED"
          RoleArn: !GetAtt 
            - RDSProxyRole
            - Arn
          RequireTLS: false
          IdleClientTimeout: 1800
          DebugLogging: false

  RDSDBProxyTargetGroup:
      Type: "AWS::RDS::DBProxyTargetGroup"
      Properties:
          DBProxyName: !Ref RDSDBProxy
          TargetGroupName: "default"
          DBInstanceIdentifiers : [ !Ref DBInstanceName ]
          ConnectionPoolConfigurationInfo: 
              MaxConnectionsPercent: 100
              MaxIdleConnectionsPercent: 50
              ConnectionBorrowTimeout: 120
# ------------------------------------------------------------#
# RdsProxyRole create
# ------------------------------------------------------------#
  RDSProxyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "rdsProxyRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action: sts:AssumeRole
      Description: "Use for RDS Proxy"
      # 作成したユーザ管理ポリシーを指定
      ManagedPolicyArns:
        - !Ref SecretsManagerManagedPolicy
      Path: /
#      Policies:
#        - PolicyName: AllowGetSecretValue
#          PolicyDocument:
#            Version: "2012-10-17"
#            Statement:
#              - Effect: Allow
#                Action:
#                  - secretsmanager:GetSecretValue
#                Resource: !Ref SecretsManagerManagedPolicy
  SecretsManagerManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: "Get values from Secrets Manager"
      ManagedPolicyName: "rds-proxy-policy-cf"
      Path: /
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !ImportValue SecretsManagerSecret-ARN
          - Effect: Allow
            Action:
              - "kms:Decrypt"
            Resource: !ImportValue SampleKey-ARN
            Condition:
              StringEquals:
                kms:ViaService: !Sub "secretsmanager.${AWS::Region}.amazonaws.com"


#  IAMRoleForRdsProxy:
#    Type: 'AWS::IAM::Role'
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: "2012-10-17"
#        Statement:
#          -
#            Effect: "Allow"
#            Principal:
#              Service:
#                - "rds.amazonaws.com"
#            Action:
#              - "sts:AssumeRole"
#      ManagedPolicyArns:
#        - 'arn:aws:iam::aws:policy/AmazonRDSFullAccess'
##        - 'arn:aws:iam::aws:policy/AWSKeyManagementServicePowerUser'
#      MaxSessionDuration: 3600
#      Path: "/"
#      RoleName: "rdsProxyRole"

#  SecretsManagerManagedPolicy:
#    Type: "AWS::IAM::ManagedPolicy"
#    Properties:
#      Description: "Get values from Secrets Manager"
#      ManagedPolicyName: "rds-proxy-policy"
#      Path: /
#      PolicyDocument:
#        Version: "2012-10-17"
#        Statement:
#          - Effect: Allow
#            Action:
#              - "secretsmanager:GetSecretValue"
#            Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:hoge"
#          - Effect: Allow
#            Action:
#              - "kms:Decrypt"
#            Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/testkey"
#            Condition:
#              StringEquals:
#                kms:ViaService: !Sub "secretsmanager.${AWS::Region}.amazonaws.com"
