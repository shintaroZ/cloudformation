AWSTemplateFormatVersion: "2010-09-09"
Description: "SecretManager and RDSProxy create"

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "proxyName"
        Parameters:
          - proxyName
      - Label:
          default: "RDS and SecretsManager Configuration"
        Parameters:
          - DBInstanceId
          - SecretsManagerARN
    ParameterLabels:
      DBInstanceId:
        default: "DBInstanceId"
      SecretsManagerARN:
        default: "SecretsManagerARN"
# ------------------------------------------------------------#
# Input Parameters
# ------------------------------------------------------------# 
Parameters:
  DBInstanceId:
    Type: String
    Default: "budonoki-rds"
    Description : "DBInstanceId output to rds stack"
  SecretsManagerARN:
    Type: String
    Default: "arn********"
    Description : "SecretsManagerARN output to rds stack"
  vpcId:
    Type: 'AWS::EC2::VPC::Id'
  subnetIda:
    Type: 'AWS::EC2::Subnet::Id'
    Description : "select public-subnet-a"
  subnetIdc:
    Type: 'AWS::EC2::Subnet::Id'
    Description : "select public-subnet-c"
  securityGroupId:
    Type: 'AWS::EC2::SecurityGroup::Id'
    Description : "select proxy-sg"
# ------------------------------------------------------------#
# Resources
# ------------------------------------------------------------# 
Resources:
  RDSDBProxy:
      Type: "AWS::RDS::DBProxy"
      Properties:
          DBProxyName: !Sub "${DBInstanceId}-Proxy"
          EngineFamily: "MYSQL"
          VpcSecurityGroupIds: 
            - !Sub "${securityGroupId}"
          VpcSubnetIds: 
            - !Sub "${subnetIda}"
            - !Sub "${subnetIdc}"
          Auth: 
            - 
              AuthScheme: "SECRETS"
              SecretArn: !Sub ${SecretsManagerARN}
              IAMAuth: "DISABLED"
          RoleArn: !GetAtt 
            - RDSProxyRole
            - Arn
          RequireTLS: false
          IdleClientTimeout: 1800
          DebugLogging: false

  RDSDBProxyTargetGroup:
      Type: "AWS::RDS::DBProxyTargetGroup"
      Properties:
          DBProxyName: !Ref RDSDBProxy
          TargetGroupName: "default"
          DBInstanceIdentifiers : [ !Ref DBInstanceId ]
          ConnectionPoolConfigurationInfo: 
              MaxConnectionsPercent: 100
              MaxIdleConnectionsPercent: 50
              ConnectionBorrowTimeout: 120
# ------------------------------------------------------------#
# RdsProxyRole create
# ------------------------------------------------------------#
  RDSProxyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${DBInstanceId}-Proxy-Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action: sts:AssumeRole
      Description: "Use for RDS Proxy"
      # 作成したユーザ管理ポリシーを指定
      ManagedPolicyArns:
        - !Ref SecretsManagerManagedPolicy
      Path: /
  SecretsManagerManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: "Get values from Secrets Manager"
      ManagedPolicyName: "rds-proxy-policy-cf"
      Path: /
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !Sub ${SecretsManagerARN}
          - Effect: Allow
            Action:
              - "kms:Decrypt"
            Resource: !ImportValue SecretsManagerKey-ARN
            Condition:
              StringEquals:
                kms:ViaService: !Sub "secretsmanager.${AWS::Region}.amazonaws.com"
