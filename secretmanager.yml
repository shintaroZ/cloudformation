AWSTemplateFormatVersion: "2010-09-09"
Description: "SecretManager and RDSProxy create"

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "proxyName"
        Parameters:
          - proxyName
      - Label:
          default: "RDS Configuration"
        Parameters:
          - DBInstanceName
          - DBMasterUserName
          - DBPassword
          - DBHost
          - DBPort
    ParameterLabels:
      DBInstanceName:
        default: "DBInstanceName"
      DBMasterUserName:
        default: "DBUserName"
      DBPassword:
        default: "DBPassword"
      DBHost:
        default: "DBHost"
      DBPort:
        default: "DBPort"
# ------------------------------------------------------------#
# Input Parameters
# ------------------------------------------------------------# 
Parameters:
  proxyName:
    Type: String
  DBInstanceName:
    Type: String
    Default: "budonoki-rds"
  DBMasterUserName:
    Type: String
  DBPassword:
    Type: String
    NoEcho: true
  DBHost:
    Type: String
  DBPort:
    Type: Number
  vpcId:
    Type: 'AWS::EC2::VPC::Id'
  subnetIda:
    Type: 'AWS::EC2::Subnet::Id'
    Description : "select private-lambda-subnet-a"
  subnetIdc:
    Type: 'AWS::EC2::Subnet::Id'
    Description : "select private-lambda-subnet-c"
  securityGroupId:
    Type: 'AWS::EC2::SecurityGroup::Id'
    Description : "select proxy-sg"
# ------------------------------------------------------------#
# Resources
# ------------------------------------------------------------# 
Resources:
  SecretsManagerSecret:
      Type: "AWS::SecretsManager::Secret"
      Properties:
          Name: "budonoki/MySQL"
          Description: "-"
          SecretString: !Sub "{\"username\":\"${DBMasterUserName}\",\"password\":\"${DBPassword}\",\"engine\":\"mysql\",\"host\":\"${DBHost}\",\"port\":${DBPort},\"dbInstanceIdentifier\":\"${DBInstanceName}\"}"

  RDSDBProxy:
      Type: "AWS::RDS::DBProxy"
      Properties:
          DBProxyName: !Sub "${proxyName}"
          EngineFamily: "MYSQL"
          VpcSecurityGroupIds: 
            - !Sub "${securityGroupId}"
          VpcSubnetIds: 
            - !Sub "${subnetIda}"
            - !Sub "${subnetIdc}"
          Auth: 
            - 
              AuthScheme: "SECRETS"
              SecretArn: !Ref SecretsManagerSecret
              IAMAuth: "DISABLED"
          RoleArn: !GetAtt 
            - IAMRoleForRdsProxy
            - Arn
          RequireTLS: false
          IdleClientTimeout: 1800
          DebugLogging: false

  RDSDBProxyTargetGroup:
      Type: "AWS::RDS::DBProxyTargetGroup"
      Properties:
          DBProxyName: !Ref RDSDBProxy
          TargetGroupName: "default"
          ConnectionPoolConfigurationInfo: 
              MaxConnectionsPercent: 100
              MaxIdleConnectionsPercent: 50
              ConnectionBorrowTimeout: 120
# ------------------------------------------------------------#
# RdsProxyRole create
# ------------------------------------------------------------#
  IAMRoleForRdsProxy:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonRDSFullAccess'
#        - !Ref SecretsManagerManagedPolicy
      MaxSessionDuration: 3600
      Path: "/"
      RoleName: "rdsProxyRole"
      
#   SecretsManagerManagedPolicy:
#     Type: "AWS::IAM::ManagedPolicy"
#     Properties:
#       Description: "Get values from Secrets Manager"
#       ManagedPolicyName: "rds-proxy-policy"
#       Path: /
#       PolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: Allow
#             Action:
#               - "secretsmanager:GetSecretValue"
#             Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretsManagerName}"
#           - Effect: Allow
#             Action:
#               - "kms:Decrypt"
#             Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/testkey"
#             Condition:
#               StringEquals:
#                 kms:ViaService: !Sub "secretsmanager.${AWS::Region}.amazonaws.com"
