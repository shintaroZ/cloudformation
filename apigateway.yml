AWSTemplateFormatVersion: "2010-09-09"
Description: "APIGateway Create"
Metadata: 
  "AWS::CloudFormation::Interface": 
    ParameterGroups: 
      - Label: 
          default: "Project Name Prefix"
        Parameters: 
          - ProjectPrefix

# ------------------------------------------------------------#
# Input Parameters
# ------------------------------------------------------------#
Parameters:
  ProjectPrefix:
    Type: String
    Default: "eg-iot"
    Description : "input project prefix"
    
Resources:
# ------------------------------------------------------------#
# RestAPI
# ------------------------------------------------------------#
  ApiGatewayRestApi:
      Type: "AWS::ApiGateway::RestApi"
      Properties:
          Name: !Sub "${ProjectPrefix}-api"
          Description: !Sub "${ProjectPrefix}-API"
          ApiKeySourceType: "HEADER"
          EndpointConfiguration: 
              Types: 
                - "REGIONAL"

# ------------------------------------------------------------#
# リソース/datacollection
# ------------------------------------------------------------#
  ApiGatewayResourceDataCollection:
      Type: "AWS::ApiGateway::Resource"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          PathPart: "datacollection"
          ParentId: !GetAtt ApiGatewayRestApi.RootResourceId

# ------------------------------------------------------------#
# リソース/mailsend
# ------------------------------------------------------------#
  ApiGatewayResourceMailSend:
      Type: "AWS::ApiGateway::Resource"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          PathPart: "mailsend"
          ParentId: !GetAtt ApiGatewayRestApi.RootResourceId

# ------------------------------------------------------------#
# リソース/edgerestart
# ------------------------------------------------------------#
  ApiGatewayResourceEdgerestart:
      Type: "AWS::ApiGateway::Resource"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          PathPart: "edgerestart"
          ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
          
# ------------------------------------------------------------#
# リソース/equipment
# ------------------------------------------------------------#
  ApiGatewayResourceEquipment:
      Type: "AWS::ApiGateway::Resource"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          PathPart: "edgerestart"
          ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
          
# ------------------------------------------------------------#
# リソース/soundFileHistory
# ------------------------------------------------------------#
  ApiGatewayResourceSoundFileHistory:
      Type: "AWS::ApiGateway::Resource"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          PathPart: "soundFileHistory"
          ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
          
# ------------------------------------------------------------#
# リソース/collectionType
# ------------------------------------------------------------#
  ApiGatewayResourceCollectionType:
      Type: "AWS::ApiGateway::Resource"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          PathPart: "collectionType"
          ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
          
# ------------------------------------------------------------#
# リソース/currentSound
# ------------------------------------------------------------#
  ApiGatewayResourceCurrentSound:
      Type: "AWS::ApiGateway::Resource"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          PathPart: "currentSound"
          ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
          
# ------------------------------------------------------------#
# リソース/soundDownload
# ------------------------------------------------------------#
  ApiGatewayResourceSoundDownload:
      Type: "AWS::ApiGateway::Resource"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          PathPart: "soundDownload"
          ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
          
# ------------------------------------------------------------#
# リソース/replaceSetting
# ------------------------------------------------------------#
  ApiGatewayResourceReplaceSetting:
      Type: "AWS::ApiGateway::Resource"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          PathPart: "replaceSetting"
          ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
          
# ------------------------------------------------------------#
# リクエスト入力チェック
# ------------------------------------------------------------#
  RequestValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties: 
          Name: "ValidateBodyParameters"
          RestApiId: !Ref ApiGatewayRestApi
          ValidateRequestBody: true
          ValidateRequestParameters: true

# ------------------------------------------------------------#
# メソッド datacollection/delete
# ------------------------------------------------------------#
  ApiGatewayMethod:
      Type: "AWS::ApiGateway::Method"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          ResourceId: !Ref ApiGatewayResourceDataCollection
          HttpMethod: "DELETE"
          AuthorizationType: "COGNITO_USER_POOLS"
          AuthorizerId: !Ref ApiGatewayAuthorizer
          ApiKeyRequired: false
          RequestValidatorId: !Ref RequestValidator
          RequestParameters: 
              "method.request.header.idToken": true
              "method.request.querystring.clientName": true
              "method.request.querystring.deviceId": true
              "method.request.querystring.sensorId": true
          RequestModels: 
              "application/json": "Empty"
          MethodResponses: 
            - 
              ResponseParameters: 
                  "method.response.header.Access-Control-Allow-Origin": false
              StatusCode: "204"
            - 
              ResponseParameters: 
                  "method.response.header.Access-Control-Allow-Origin": false
              StatusCode: "400"
            - 
              ResponseParameters: 
                  "method.response.header.Access-Control-Allow-Origin": false
              StatusCode: "500"
          Integration: 
              CacheNamespace: !Ref ApiGatewayResourceDataCollection
              ContentHandling: "CONVERT_TO_TEXT"
              Credentials: !GetAtt 
                - IAMRoleForApiGateway
                - Arn
              IntegrationHttpMethod: "POST"
              IntegrationResponses: 
                - 
                  ResponseParameters: 
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                  SelectionPattern: ""
                  StatusCode: "204"
                - 
                  ResponseParameters: 
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                  SelectionPattern: "Missing required request parameters.*"
                  StatusCode: "400"
                - 
                  ResponseParameters: 
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                  SelectionPattern: "\\([0-9].*|must be real number.*|.*Task timed out after.*|An error occurred.*|Authentication Error.*"
                  StatusCode: "500"
              PassthroughBehavior: "WHEN_NO_MATCH"
              RequestParameters: 
                  "integration.request.header.idToken": "method.request.header.idToken"
                  "integration.request.path.clientName": "method.request.querystring.clientName"
                  "integration.request.path.deviceId": "method.request.querystring.deviceId"
                  "integration.request.path.sensorId": "method.request.querystring.sensorId"
              RequestTemplates: 
                  "application/json": |
                      {
                          "clientName" : "$input.params('clientName')"
                          ,"deviceId" : "$input.params('deviceId')"
                          ,"sensorId" : "$input.params('sensorId')"
                          ,"idToken" : "$input.params('idToken')"
                      }
              TimeoutInMillis: 29000
              Type: "AWS"
              Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:mastermainte_datacollection_delete:PRD/invocations"

# ------------------------------------------------------------#
# メソッド:datacollection/get
# ------------------------------------------------------------#
  ApiGatewayMethod2:
      Type: "AWS::ApiGateway::Method"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          ResourceId: !Ref ApiGatewayResourceDataCollection
          HttpMethod: "GET"
          AuthorizationType: "COGNITO_USER_POOLS"
          AuthorizerId: !Ref ApiGatewayAuthorizer
          ApiKeyRequired: false
          RequestValidatorId: !Ref RequestValidator
          RequestParameters: 
              "method.request.header.idToken": true
              "method.request.querystring.clientName": true
              "method.request.querystring.deviceId": false
              "method.request.querystring.sensorId": false
          MethodResponses: 
            - 
              ResponseModels: 
                  "application/json": "Empty"
              ResponseParameters: 
                  "method.response.header.Access-Control-Allow-Origin": false
                  "method.response.header.Content-Type": false
              StatusCode: "200"
            - 
              ResponseModels: 
                  "application/json": "Error"
              ResponseParameters: 
                  "method.response.header.Content-Type": false
              StatusCode: "500"
          Integration: 
              CacheNamespace: !Ref ApiGatewayResourceDataCollection
              ContentHandling: "CONVERT_TO_TEXT"
              Credentials: !GetAtt 
                - IAMRoleForApiGateway
                - Arn
              IntegrationHttpMethod: "POST"
              IntegrationResponses: 
                - 
                  ResponseParameters: 
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                      "method.response.header.Content-Type": "'application/json;charset=UTF-8'"
                  ResponseTemplates: {}
                  StatusCode: "200"
                - 
                  ResponseParameters: 
                      "method.response.header.Content-Type": "'application/json;charset=UTF-8'"
                  ResponseTemplates: 
                      "application/json": |
                          {
                              "message" : $input.path('$.errorMessage')
                          }
                  SelectionPattern: "\\([0-9].*|must be real number.*|.*Task timed out after.*|An error occurred.*|Authentication Error.*"
                  StatusCode: "500"
              PassthroughBehavior: "WHEN_NO_MATCH"
              RequestParameters: 
                  "integration.request.header.idToken": "method.request.header.idToken"
                  "integration.request.path.clientName": "method.request.querystring.clientName"
                  "integration.request.path.deviceId": "method.request.querystring.deviceId"
                  "integration.request.path.sensorId": "method.request.querystring.sensorId"
              RequestTemplates: 
                  "application/json": |
                      {
                          "clientName" : "$input.params('clientName')"
                          #if($input.params('deviceId') != "")
                              ,"deviceId" : "$input.params('deviceId')"
                          #end
                          #if($input.params('sensorId') != "")
                              ,"sensorId" : "$input.params('sensorId')"
                          #end
                          ,"idToken" : "$input.params('idToken')"
                      }
              TimeoutInMillis: 29000
              Type: "AWS"
              Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:mastermainte_datacollection_get:PRD/invocations"


# ------------------------------------------------------------#
# メソッド:datacollection/options
# ------------------------------------------------------------#
  ApiGatewayMethod3:
      Type: "AWS::ApiGateway::Method"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          ResourceId: !Ref ApiGatewayResourceDataCollection
          HttpMethod: "OPTIONS"
          AuthorizationType: "NONE"
          ApiKeyRequired: false
          RequestParameters: {}
          MethodResponses: 
            - 
              ResponseModels: 
                  "application/json": "Empty"
              ResponseParameters: 
                  "method.response.header.Access-Control-Allow-Headers": false
                  "method.response.header.Access-Control-Allow-Methods": false
                  "method.response.header.Access-Control-Allow-Origin": false
              StatusCode: "200"
            - 
              ResponseModels: 
                  "application/json": "Empty"
              ResponseParameters: 
                  "method.response.header.Access-Control-Allow-Headers": false
                  "method.response.header.Access-Control-Allow-Methods": false
                  "method.response.header.Access-Control-Allow-Origin": false
              StatusCode: "204"
          Integration: 
              CacheNamespace: !Ref ApiGatewayResourceDataCollection
              IntegrationResponses: 
                - 
                  ResponseParameters: 
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,idToken'"
                      "method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,OPTIONS,POST'"
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                  ResponseTemplates: {}
                  StatusCode: "200"
              PassthroughBehavior: "WHEN_NO_MATCH"
              RequestTemplates: 
                  "application/json": "{\"statusCode\": 200}"
              TimeoutInMillis: 29000
              Type: "MOCK"

# ------------------------------------------------------------#
# メソッド:datacollection/post
# ------------------------------------------------------------#
  ApiGatewayMethod4:
      Type: "AWS::ApiGateway::Method"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          ResourceId: !Ref ApiGatewayResourceDataCollection
          HttpMethod: "POST"
          AuthorizationType: "COGNITO_USER_POOLS"
          AuthorizerId: !Ref ApiGatewayAuthorizer
          ApiKeyRequired: false
          RequestValidatorId: !Ref RequestValidator
          RequestParameters: 
              "method.request.header.idToken": true
              "method.request.querystring.clientName": true
              "method.request.querystring.deviceId": true
              "method.request.querystring.sensorId": true
          RequestModels: 
              "application/json": "Empty"
          MethodResponses: 
            - 
              ResponseModels: 
                  "application/json": "Empty"
              ResponseParameters: 
                  "method.response.header.Access-Control-Allow-Origin": false
              StatusCode: "200"
            - 
              ResponseParameters: 
                  "method.response.header.Content-Type": false
              StatusCode: "400"
            - 
              ResponseParameters: 
                  "method.response.header.Content-Type": false
              StatusCode: "500"
          Integration: 
              CacheNamespace: !Ref ApiGatewayResourceDataCollection
              ContentHandling: "CONVERT_TO_TEXT"
              Credentials: !GetAtt 
                - IAMRoleForApiGateway
                - Arn
              IntegrationHttpMethod: "POST"
              IntegrationResponses: 
                - 
                  ResponseParameters: 
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                  ResponseTemplates: {}
                  StatusCode: "200"
                - 
                  ResponseParameters: 
                      "method.response.header.Content-Type": "'application/json;charset=UTF-8'"
                  SelectionPattern: "Missing required request parameters.*|The parameters is.*|EncodeError."
                  StatusCode: "400"
                - 
                  ResponseParameters: 
                      "method.response.header.Content-Type": "'application/json;charset=UTF-8'"
                  SelectionPattern: "\\([0-9].*|must be real number.*|.*Task timed out after.*|An error occurred.*|Authentication Error.*"
                  StatusCode: "500"
              PassthroughBehavior: "WHEN_NO_MATCH"
              RequestParameters: 
                  "integration.request.header.idToken": "method.request.header.idToken"
                  "integration.request.path.clientName": "method.request.querystring.clientName"
                  "integration.request.path.deviceId": "method.request.querystring.deviceId"
                  "integration.request.path.sensorId": "method.request.querystring.sensorId"
              RequestTemplates: 
                  "application/json": |
                      {
                          "clientName" : "$input.params('clientName')"
                          ,"deviceId" : "$input.params('deviceId')"
                          ,"sensorId" : "$input.params('sensorId')"
                          ,"bodyRequest" : $input.json('$')
                          ,"idToken" : "$input.params('idToken')"
                      }
                      
              TimeoutInMillis: 29000
              Type: "AWS"
              Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:mastermainte_datacollection_upsert:PRD/invocations"

# ------------------------------------------------------------#
# メソッド:mailsend/delete
# ------------------------------------------------------------#
  ApiGatewayMethod5:
      Type: "AWS::ApiGateway::Method"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          ResourceId: !Ref ApiGatewayResourceMailSend
          HttpMethod: "DELETE"
          AuthorizationType: "COGNITO_USER_POOLS"
          AuthorizerId: !Ref ApiGatewayAuthorizer
          ApiKeyRequired: false
          RequestValidatorId: !Ref RequestValidator
          RequestParameters: 
              "method.request.header.idToken": true
              "method.request.querystring.clientName": true
              "method.request.querystring.mailSendId": true
          MethodResponses: 
            - 
              ResponseParameters: 
                  "method.response.header.Access-Control-Allow-Origin": false
              StatusCode: "204"
            - 
              ResponseParameters: 
                  "method.response.header.Access-Control-Allow-Origin": false
                  "method.response.header.Content-Type": false
              StatusCode: "400"
            - 
              ResponseParameters: 
                  "method.response.header.Access-Control-Allow-Origin": false
                  "method.response.header.Content-Type": false
              StatusCode: "500"
          Integration: 
              CacheNamespace: !Ref ApiGatewayResourceMailSend
              ContentHandling: "CONVERT_TO_TEXT"
              Credentials: !GetAtt 
                - IAMRoleForApiGateway
                - Arn
              IntegrationHttpMethod: "POST"
              IntegrationResponses: 
                - 
                  ResponseParameters: 
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                  StatusCode: "204"
                - 
                  ResponseParameters: 
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                      "method.response.header.Content-Type": "'application/json;charset=UTF-8'"
                  SelectionPattern: "Missing required request parameters.*"
                  StatusCode: "400"
                - 
                  ResponseParameters: 
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                      "method.response.header.Content-Type": "'application/json;charset=UTF-8'"
                  SelectionPattern: "\\([0-9].*|must be real number.*|.*Task timed out after.*|An error occurred.*|Authentication Error.*"
                  StatusCode: "500"
              PassthroughBehavior: "WHEN_NO_MATCH"
              RequestParameters: 
                  "integration.request.header.idToken": "method.request.header.idToken"
                  "integration.request.path.clientName": "method.request.querystring.clientName"
                  "integration.request.path.mailSendId": "method.request.querystring.mailSendId"
              RequestTemplates: 
                  "application/json": |
                      {
                          "clientName" : "$input.params('clientName')"
                          ,"mailSendId" : $input.params('mailSendId')
                          ,"idToken" : "$input.params('idToken')"
                      }
              TimeoutInMillis: 29000
              Type: "AWS"
              Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:mastermainte_mailsend_delete:PRD/invocations"

# ------------------------------------------------------------#
# メソッド:mailsend/get
# ------------------------------------------------------------#
  ApiGatewayMethod6:
      Type: "AWS::ApiGateway::Method"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          ResourceId: !Ref ApiGatewayResourceMailSend
          HttpMethod: "GET"
          AuthorizationType: "COGNITO_USER_POOLS"
          AuthorizerId: !Ref ApiGatewayAuthorizer
          ApiKeyRequired: false
          RequestValidatorId: !Ref RequestValidator
          RequestParameters: 
              "method.request.header.idToken": false
              "method.request.querystring.clientName": true
          MethodResponses: 
            - 
              ResponseModels: 
                  "application/json": "Empty"
              ResponseParameters: 
                  "method.response.header.Access-Control-Allow-Origin": false
                  "method.response.header.Content-Type": false
              StatusCode: "200"
            - 
              ResponseParameters: 
                  "method.response.header.Content-Type": false
              StatusCode: "500"
          Integration: 
              CacheNamespace: !Ref ApiGatewayResourceMailSend
              ContentHandling: "CONVERT_TO_TEXT"
              Credentials: !GetAtt 
                - IAMRoleForApiGateway
                - Arn
              IntegrationHttpMethod: "POST"
              IntegrationResponses: 
                - 
                  ResponseParameters: 
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                      "method.response.header.Content-Type": "'application/json;charset=UTF-8'"
                  ResponseTemplates: {}
                  StatusCode: "200"
                - 
                  ResponseParameters: 
                      "method.response.header.Content-Type": "'application/json;charset=UTF-8'"
                  SelectionPattern: "\\([0-9].*|must be real number.*|.*Task timed out after.*|An error occurred.*|Authentication Error.*"
                  StatusCode: "500"
              PassthroughBehavior: "WHEN_NO_MATCH"
              RequestParameters: 
                  "integration.request.header.idToken": "method.request.header.idToken"
                  "integration.request.path.clientName": "method.request.querystring.clientName"
              RequestTemplates: 
                  "application/json": |
                      {
                          "clientName" : "$input.params('clientName')"
                          ,"idToken" : "$input.params('idToken')"
                      }
              TimeoutInMillis: 29000
              Type: "AWS"
              Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:mastermainte_mailsend_get:PRD/invocations"

# ------------------------------------------------------------#
# メソッド:mailsend/options
# ------------------------------------------------------------#
  ApiGatewayMethod7:
      Type: "AWS::ApiGateway::Method"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          ResourceId: !Ref ApiGatewayResourceMailSend
          HttpMethod: "OPTIONS"
          AuthorizationType: "NONE"
          ApiKeyRequired: false
          RequestParameters: {}
          MethodResponses: 
            - 
              ResponseModels: 
                  "application/json": "Empty"
              ResponseParameters: 
                  "method.response.header.Access-Control-Allow-Headers": false
                  "method.response.header.Access-Control-Allow-Methods": false
                  "method.response.header.Access-Control-Allow-Origin": false
              StatusCode: "200"
          Integration: 
              CacheNamespace: !Ref ApiGatewayResourceMailSend
              IntegrationResponses: 
                - 
                  ResponseParameters: 
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,idToken'"
                      "method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,OPTIONS,POST'"
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                  ResponseTemplates: {}
                  StatusCode: "200"
              PassthroughBehavior: "WHEN_NO_MATCH"
              RequestTemplates: 
                  "application/json": "{\"statusCode\": 200}"
              TimeoutInMillis: 29000
              Type: "MOCK"

# ------------------------------------------------------------#
# メソッド:mailsend/post
# ------------------------------------------------------------#
  ApiGatewayMethod8:
      Type: "AWS::ApiGateway::Method"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          ResourceId: !Ref ApiGatewayResourceMailSend
          HttpMethod: "POST"
          AuthorizationType: "COGNITO_USER_POOLS"
          AuthorizerId: !Ref ApiGatewayAuthorizer
          ApiKeyRequired: false
          RequestParameters: 
              "method.request.header.idToken": true
              "method.request.querystring.clientName": true
              "method.request.querystring.mailSendId": true
          MethodResponses: 
            - 
              ResponseModels: 
                  "application/json": "Empty"
              ResponseParameters: 
                  "method.response.header.Access-Control-Allow-Origin": false
              StatusCode: "200"
            - 
              ResponseParameters: 
                  "method.response.header.Content-Type": false
              StatusCode: "400"
            - 
              ResponseParameters: 
                  "method.response.header.Content-Type": false
              StatusCode: "500"
          Integration: 
              CacheNamespace: !Ref ApiGatewayResourceMailSend
              ContentHandling: "CONVERT_TO_TEXT"
              Credentials: !GetAtt 
                - IAMRoleForApiGateway
                - Arn
              IntegrationHttpMethod: "POST"
              IntegrationResponses: 
                - 
                  ResponseParameters: 
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                  ResponseTemplates: {}
                  StatusCode: "200"
                - 
                  ResponseParameters: 
                      "method.response.header.Content-Type": "'application/json;charset=UTF-8'"
                  SelectionPattern: "Missing required request parameters.*|The parameters is.*|EncodeError."
                  StatusCode: "400"
                - 
                  ResponseParameters: 
                      "method.response.header.Content-Type": "'application/json;charset=UTF-8'"
                  SelectionPattern: "\\([0-9].*|must be real number.*|.*Task timed out after.*|An error occurred.*|Authentication Error.*"
                  StatusCode: "500"
              PassthroughBehavior: "WHEN_NO_MATCH"
              RequestParameters: 
                  "integration.request.header.idToken": "method.request.header.idToken"
                  "integration.request.path.clientName": "method.request.querystring.clientName"
                  "integration.request.path.mailSendId": "method.request.querystring.mailSendId"
              RequestTemplates: 
                  "application/json": |
                      {
                          "clientName" : "$input.params('clientName')"
                          ,"mailSendId" : $input.params('mailSendId')
                          ,"bodyRequest" : $input.json('$')
                          ,"idToken" : "$input.params('idToken')"
                      }
                      
              TimeoutInMillis: 29000
              Type: "AWS"
              Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:mastermainte_mailsend_upsert:PRD/invocations"

# ------------------------------------------------------------#
# メソッド:collectionType/get
# ------------------------------------------------------------#
  ApiGatewayMethodCollectionTypeGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceCollectionType
      HttpMethod: "GET"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref ApiGatewayAuthorizer
      ApiKeyRequired: false
      RequestValidatorId: !Ref RequestValidator
      RequestParameters:
        "method.request.header.idToken": true
        "method.request.querystring.clientName": true
      MethodResponses:
        - ResponseModels:
            "application/json": "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin": false
            "method.response.header.Content-Type": false
          StatusCode: "200"
        - ResponseModels:
            "application/json": "Error"
          ResponseParameters:
            "method.response.header.Content-Type": false
          StatusCode: "500"
      Integration:
        CacheNamespace: !Ref ApiGatewayResourceCollectionType
        ContentHandling: "CONVERT_TO_TEXT"
        Credentials: !GetAtt
          - IAMRoleForApiGateway
          - Arn
        IntegrationHttpMethod: "POST"
        IntegrationResponses:
          - ResponseParameters:
              "method.response.header.Access-Control-Allow-Origin": "'*'"
              "method.response.header.Content-Type": "'application/json;charset=UTF-8'"
            ResponseTemplates: {}
            StatusCode: "200"
          - ResponseParameters:
              "method.response.header.Content-Type": "'application/json;charset=UTF-8'"
            ResponseTemplates:
              "application/json": |
                {
                    "message" : $input.path('$.errorMessage')
                }
            SelectionPattern: "\\([0-9].*|must be real number.*|.*Task timed out after.*|An error occurred.*|Authentication Error.*"
            StatusCode: "500"
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestParameters:
          "integration.request.header.idToken": "method.request.header.idToken"
          "integration.request.path.clientName": "method.request.querystring.clientName"
        RequestTemplates:
          "application/json": |
            {
                "clientName" : "$input.params('clientName')"
                ,"idToken" : "$input.params('idToken')"
            }
        TimeoutInMillis: 29000
        Type: "AWS"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:mastermainte_collectiontype_get:PRD/invocations"

# ------------------------------------------------------------#
# メソッド:collectionType/options
# ------------------------------------------------------------#
  ApiGatewayMethodCollectionTypeOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceCollectionType
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      RequestParameters: {}
      MethodResponses:
        - ResponseModels:
            "application/json": "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false
          StatusCode: "200"
      Integration:
        CacheNamespace: !Ref ApiGatewayResourceCollectionType
        IntegrationResponses:
          - ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,idToken'"
              "method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates: {}
            StatusCode: "200"
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates:
          "application/json": '{"statusCode": 200}'
        TimeoutInMillis: 29000
        Type: "MOCK"

# ------------------------------------------------------------#
# Cognito認証
# ------------------------------------------------------------#
  ApiGatewayAuthorizer:
      Type: "AWS::ApiGateway::Authorizer"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          Name: "cognitoAuth"
          Type: "COGNITO_USER_POOLS"
          ProviderARNs: [ !ImportValue CognitoUserPoolARN ]
          AuthType: "cognito_user_pools"
          IdentitySource: "method.request.header.idToken"
# ------------------------------------------------------------#
# ApiGatewayRole create
# ------------------------------------------------------------#
  IAMRoleForApiGateway:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator'
        - 'arn:aws:iam::aws:policy/AWSLambda_FullAccess'
      MaxSessionDuration: 3600
      Path: "/"
      RoleName: !Sub "${ProjectPrefix}-apiGatewayRole"

# ------------------------------------------------------------#
# Deployment 
# ------------------------------------------------------------#
  ApiGatewayRestApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayRestApiDeployment
      RestApiId: !Ref ApiGatewayRestApi
      StageName: "PRD"
  ApiGatewayRestApiDeployment:
    DependsOn: ApiGatewayMethod
    Type: AWS::ApiGateway::Deployment
    Properties: 
      RestApiId: !Ref ApiGatewayRestApi
#      StageName: "PRD"
# ------------------------------------------------------------#
# Output Parameters
# ------------------------------------------------------------#
Outputs:
  ApiGatewayRestApiId:
    Value: !Ref ApiGatewayRestApi
    Export:
      Name: "ApiGatewayRestApiId"

  ApiGatewayRestApiEndpoint:
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/PRD"
    Export:
      Name: "ApiGatewayRestApiEndpoint"